# Sparcle – Spine‑Focused Particle/Loop VFX Editor

### 0. Elevator Pitch

> **Sparcle** is a desktop node‑based VFX builder that lets slot‑game artists craft ultra‑small, perfectly looping particle effects and export them as Spine‑ready JSON + atlas + PNG that fit within the 2 MB / 2‑sheet hard cap.

---

### 1. Core Requirements

* Fully Spine‑compatible: bones, slots, region attachments, transforms (translate/scale/rotate/shear), RGBA & tint‑black keys, blend‑modes (normal/additive/multiply).
* **Looping VFX**: every exported timeline must play seamlessly (first frame == last frame) with a user‑chosen loop duration (0.25 – 10 s).
* Budget guard‑rails: ≤ 2 MB additional PNG, ≤ 2 sprite‑sheet pages, ≤ 5 KB (gzipped) JSON per effect.

---

### 2. Tech Stack Decision *(solo‑friendly)*

| Layer            | Choice                                               | Rationale                                            |
| ---------------- | ---------------------------------------------------- | ---------------------------------------------------- |
| Desktop shell    | **Electron + Vite**                                  | Hot‑reload, one‑code‑base JS/TS.                     |
| UI / Node graph  | **Rete.js v2**                                       | Drag‑connect ports, minimap, history out‑of‑the‑box. |
| Preview renderer | **PixiJS v8** + **pixi‑particles** + **@pixi‑spine** | Shares textures & runtimes with the final slot game. |
| Packing / CLI    | maxrects‑pali, yargs                                 | Deterministic atlas fills & batch export.            |

*(Swap Electron for Tauri/Qt later if C++ is preferred – spec stays valid.)*

---

### 3. Architecture at 10 000 ft

```
                ┌─────────────┐
PNG → drag‑drop →│  Assets DB  │──▶ Atlas‑packer
                └─────────────┘         │
                                          │
Nodes UI ───▶ Rete graph ──▶ **IR** ──▶ Spine compiler ──▶ JSON+atlas+png
                                          │
                                 Live preview (Pixi canvas)
```

* **IR (Intermediate Representation)** = minimal JSON describing emitters, timelines & textures; acts as the single source for preview + export layers.

---

### 4. Looping Algorithm

1. Artist sets *loop length* **D** (seconds) in the Inspector.
2. Engine pre‑warms the emitter graph for **D** to reach steady state.
3. Sample transforms for `t ∈ [0, D)` at step **F** (default 1/60 s).
4. Trim trailing keys that duplicate frame 0.
5. Append interpolation keys so frame D keys match frame 0 exactly.
6. Mark the Spine animation `loop = true`.

**Result:** zero visual hitch at wrap‑around, negligible extra keys.

---

### 5. Directory Skeleton

```
/sparcle
 ├─ package.json
 ├─ /src
 │   ├─ main/                  # Electron main process
 │   ├─ renderer/
 │   │    ├─ App.tsx
 │   │    ├─ graph/            # Rete nodes & controls
 │   │    └─ preview/          # Pixi canvas + runtime
 │   ├─ core/
 │   │    ├─ ir.ts             # IR types & helpers
 │   │    ├─ compiler.ts       # IR → Spine JSON
 │   │    ├─ loop.ts           # looping utils
 │   │    └─ optimiser.ts      # key decimation, float shorten
 │   └─ cli/
 │        └─ index.ts
 ├─ /docs
 │   └─ design.md
 └─ /examples
       └─ firework.sparcle
```

---

### 6. Milestones (solo dev, 6 sprints)

| Sprint | Goal                                                                      |
| ------ | ------------------------------------------------------------------------- |
| **1**  | Boilerplate (Electron Forge, Vite, TS), Rete node prototypes, PNG import. |
| **2**  | Pixi preview + basic *Sprite* & *Emitter* nodes.                          |
| **3**  | Define IR, export non‑looping Spine bursts.                               |
| **4**  | Implement Looping Algorithm + key decimation + file‑size checker.         |
| **5**  | Atlas packer with UV rewriting, presets browser.                          |
| **6**  | CLI batch exporter, undo/redo, dark theme polish.                         |

---

### 7. Dev Commands

```bash
pnpm install          # Node >=20
pnpm dev              # Electron watch mode
pnpm build            # Make distributables
pnpm export \
  --file ./examples/firework.sparcle \
  --dest ./out        # CLI batch conversion
```

---

### 8. Testing & CI

* **Unit** – vitest on serializer / optimiser.
* **Visual** – storybook snapshot of node graphs + PNG diff on preview canvas.
* **Size gate** – `scripts/ci-size.js` fails build if PNG > 2 MB or JSON > 5 KB.

---

### 9. Using This Spec with Cursor

1. Open the repo root in Cursor.
2. Pin this file + `docs/design.md`.
3. Ask: *“Generate TS types for IR as per §3.”* Cursor writes `core/ir.ts`.
4. Work sprint by sprint, always referencing the corresponding section.

---

### 10. Stretch Goals (post‑MVP)

* Effekseer backend for turbulence/distortion nodes.
* Mesh deformer node exposing Spine’s weighted mesh keys.
* Web build (pure browser) via Vite + WASM FS (for community modding).

---

### 11. Flow Chart & Reference Links

* **Download the high‑resolution flow chart:** [sparcle\_flowchart.png](sandbox:/mnt/data/sparcle_flowchart.png)
* **UI/UX mock‑up (dark theme):** [UI mock‑up PNG](sandbox:/mnt/data/A_UI_mockup_of_%22Sparcle,%22_a_particle_VFX_editor_wi.png)

**Referenced / inspired projects**

| Purpose               | Project        | Link                                                                                   |
| --------------------- | -------------- | -------------------------------------------------------------------------------------- |
| Node graph UI (JS)    | Rete.js v2     | [https://github.com/retejs/rete](https://github.com/retejs/rete)                       |
| Node graph UI (Py)    | NodeGraphQt    | [https://github.com/jchanvfx/NodeGraphQt](https://github.com/jchanvfx/NodeGraphQt)     |
| GPU ImGui UI          | Dear PyGui     | [https://github.com/hoffstadt/DearPyGui](https://github.com/hoffstadt/DearPyGui)       |
| Preview renderer      | PixiJS         | [https://pixijs.com](https://pixijs.com)                                               |
| Spine runtime in Pixi | @pixi-spine    | [https://github.com/pixijs/spine](https://github.com/pixijs/spine)                     |
| Particle engine (JS)  | pixi-particles | [https://github.com/pixijs/pixi-particles](https://github.com/pixijs/pixi-particles)   |
| Advanced FX reference | Effekseer      | [https://github.com/effekseer/Effekseer](https://github.com/effekseer/Effekseer)       |
| Atlas packer          | maxrects-pali  | [https://github.com/jamiefoo/maxrects-pali](https://github.com/jamiefoo/maxrects-pali) |

Detailed window specs (sizes in desktop layout):

* **Node Graph:** left 40 % width, draggable ports, minimap overlay top‑right.
* **Preview Window:** center 30 %, resizable; uses Pixi `Renderer` in hi‑DPI mode.
* **Dopesheet (Timeline):** bottom 25 % height, key snapping = 1/60 s, loop region highlighted.
* **Tree (Hierarchy):** right dock — collapsible, mirrors Spine’s skeleton tree.
* **Inspector / Parameters:** tabbed pane next to Tree; shows selected node, bone or attachment params with live bindings.

---

*Last updated:* 2025‑05‑13
