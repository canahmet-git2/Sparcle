# Sparcle – Kivy-Based Particle/Loop VFX Editor

### 0. Elevator Pitch

> **Sparcle** is a desktop node‑based VFX builder that lets slot‑game artists craft ultra‑small, perfectly looping particle effects and export them as Spine‑ready JSON + atlas + PNG that fit within the 2 MB / 2‑sheet hard cap. (Spine export TBD based on Python capabilities or if a JS component is retained for this).

---

### 1. Core Requirements

*   **Looping VFX**: every exported timeline must play seamlessly (first frame == last frame) with a user‑chosen loop duration (0.25 – 10 s).
*   Budget guard‑rails: ≤ 2 MB additional PNG, ≤ 2 sprite‑sheet pages, ≤ 5 KB (gzipped) JSON per effect (if Spine export is pursued).
*   Node-based interface for building effects.
*   Timeline for keyframing.
*   Parameters panel for adjusting node properties.
*   Live preview of the VFX.
*   Desktop application for Windows and macOS.

---

### 2. Tech Stack Decision *(Python/Kivy Focus)*

| Layer            | Choice                                     | Rationale                                                                 |
| ---------------- | ------------------------------------------ | ------------------------------------------------------------------------- |
| Desktop App      | **Python + Kivy**                          | Cross-platform, modern custom UI, GPU accelerated.                        |
| UI / Node graph  | **Kivy (Custom or Kivy Garden)**           | Native Python, flexible for custom node editor and UI components.       |
| Preview renderer | **Kivy Graphics API (OpenGL)**             | Integrated with Kivy, allows for custom rendering shaders if needed.      |
| Packing / CLI    | Python libraries (e.g., Pillow, custom)    | For image manipulation and potential batch export.                        |
| Spine Export     | *To Be Determined*                         | May require a separate JS module or Python Spine library if available.      |

---

### 3. Architecture at 10 000 ft (Kivy focused)

```
                ┌─────────────┐
PNG → File Dialog →│ Image Assets│───▶ (Python Image Lib)
                └─────────────┘         │
                                          │
Nodes UI (Kivy) ───▶ Node Graph Data ──▶ **Effect IR (Python)** ──▶ Preview Renderer (Kivy)
                                                     │
                                           (Optional: Spine Compiler) ──▶ JSON+atlas+png
```

*   **Effect IR (Intermediate Representation)** = Python data structures describing emitters, timelines & textures; acts as the single source for preview + export layers.

---

### 4. Looping Algorithm (Conceptual - to be adapted for Python/Kivy)

1.  Artist sets *loop length* **D** (seconds) in the Inspector.
2.  Engine (Python) pre‑warms the emitter graph for **D** to reach steady state.
3.  Sample transforms for `t ∈ [0, D)` at step **F** (default 1/60 s).
4.  Trim trailing keys that duplicate frame 0.
5.  Append interpolation keys so frame D keys match frame 0 exactly.
6.  If exporting to Spine, mark the Spine animation `loop = true`.

**Result:** zero visual hitch at wrap‑around, negligible extra keys.

---

### 5. Directory Skeleton (Initial Kivy Structure)

```
/sparcle_kivy # Or your preferred project root name
 ├─ main.py                     # Main Kivy application entry point
 ├─ requirements.txt
 ├─ /src                        # Main application source code
 │   ├─ app/                    # Core application logic, Kivy App class
 │   ├─ ui/                     # Kivy widgets, screens, layouts
 │   │    ├─ node_editor/
 │   │    ├─ timeline/
 │   │    ├─ parameters_panel/
 │   │    └─ preview_window/
 │   ├─ core/                   # Core VFX logic, IR, particle systems in Python
 │   │    ├─ ir.py
 │   │    ├─ particle_system.py
 │   │    └─ looping.py
 │   └─ assets/                 # Default assets, icons
 ├─ /examples                   # Example .sparcle files or Kivy project files
 └─ /docs
     └─ design_kivy.md          # This document or related design notes
```

---

### 6. Milestones (Kivy Focus - 6 Sprints)

| Sprint | Goal                                                                      | Tasks                                                                                                                                                                                                                             | Status      |
| ------ | ------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------- |
| **1**  | Kivy Foundation & Core UI Shell                                           | 1.1: Set up Kivy project.<br>1.2: Design main window layout (Node Editor, Timeline, Parameters, Preview areas).<br>1.3: Create placeholder widgets for UI areas.<br>1.4: Implement basic menu bar.<br>1.5: Research Kivy Node Editor solutions.<br>1.6: Research Kivy Timeline solutions. | Task 1.1 DONE, Task 1.2 DONE, Task 1.3 DONE, Task 1.4 DONE, Task 1.5 Research DONE (Custom implementation likely), Task 1.6 Research DONE (garden.timeline a base, custom additions needed) |
| **2**  | Node Editor - Phase 1 (Basic Functionality)                             | 2.1: Implement basic node creation (e.g., Source, Display nodes).<br>2.2: Node dragging & selection.<br>2.3: Basic connection drawing (sockets).<br>2.4: Define Python class structure for nodes/parameters.                         | PENDING     |
| **3**  | Parameters Panel & Preview Window - Phase 1                               | 3.1: Display/edit selected node parameters.<br>3.2: Setup Preview Window with Kivy Graphics.<br>3.3: Simple rendering in Preview from basic node changes.                                                                       | PENDING     |
| **4**  | Timeline - Phase 1 (Basic Structure) & Core Logic                         | 4.1: Visual structure of timeline (frames, layers).<br>4.2: Add keyframe representation.<br>4.3: Basic Python particle emission logic.                                                                                             | PENDING     |
| **5**  | Looping Algorithm & Enhanced Node Types                                   | 5.1: Implement Python looping algorithm (pre-warm, sample, trim, interpolate).<br>5.2: Add more complex node types (e.g., transform, color over life).<br>5.3: IR refinement.                                                    | PENDING     |
| **6**  | Polish, Basic Asset Handling & Export Prep                                | 6.1: UI Polish, theming.<br>6.2: Basic image asset import/management.<br>6.3: Investigate/Prototype Spine export (if feasible from Python, or define JS bridge).                                                               | PENDING     |

---

### 7. Dev Commands (Kivy)

```bash
pip install -r requirements.txt  # Ensure Kivy and other dependencies are installed
python main.py                   # Run the Sparcle Kivy application
# Other commands for building/packaging will be defined later (e.g., using PyInstaller or similar)
```

---

### 8. Testing & CI (To be defined for Kivy)

*   **Unit** – PyTest for core logic (IR, particle systems, looping).
*   **UI Testing** – Kivy's Recorder module or other Python UI testing tools.
*   **Visual Diffing** – Potentially for preview window snapshots.

---

### 9. Using This Spec with Cursor

1.  Open the repo root in Cursor.
2.  Pin this file.
3.  Work sprint by sprint, always referencing the corresponding section.

---

### 10. Stretch Goals (post-MVP)

*   Advanced Effekseer-like features (if feasible in Kivy/Python).
*   Mesh deformer capabilities.
*   Python-based plugin system.

---

### 11. Flow Chart & Reference Links

*   **UI/UX mock‑up (dark theme - still relevant conceptually):** [UI mock‑up PNG](sandbox:/mnt/data/A_UI_mockup_of_%22Sparcle,%22_a_particle_VFX_editor_wi.png)

**Referenced / inspired projects**

| Purpose               | Project           | Link                                                                                   |
| --------------------- | ----------------- | -------------------------------------------------------------------------------------- |
| Node graph UI (Py)    | NodeGraphQt       | [https://github.com/jchanvfx/NodeGraphQt](https://github.com/jchanvfx/NodeGraphQt)     |
| GPU ImGui UI (Py)     | Dear PyGui        | [https://github.com/hoffstadt/DearPyGui](https://github.com/hoffstadt/DearPyGui)       |
| Python GUI            | Kivy              | [https://kivy.org/](https://kivy.org/)                                                 |
| Advanced FX reference | Effekseer         | [https://github.com/effekseer/Effekseer](https://github.com/effekseer/Effekseer)       |
| WebGL FX Effekseer    | EffekseerForWebGL | [https://github.com/effekseer/EffekseerForWebGL](https://github.com/effekseer/EffekseerForWebGL) |

Detailed window specs (sizes in desktop layout - conceptual, to be adapted for Kivy):

*   **Node Graph:** left 40% width, draggable ports, minimap overlay top‑right.
*   **Preview Window:** center 30%, resizable.
*   **Dopesheet (Timeline):** bottom 25% height, key snapping = 1/60s, loop region highlighted.
*   **Tree (Hierarchy):** right dock — collapsible.
*   **Inspector / Parameters:** tabbed pane next to Tree; shows selected node params.

---

*Last updated:* (Today's Date)
